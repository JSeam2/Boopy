{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["kvColumns","title","dataIndex","key","initKvValues","value","App","useState","kv","setKv","className","span","columns","dataSource","onClick","e","preventDefault","res","prompt","data","split","axios","post","then","console","log","alert","message","tempKv","Array","from","flag","i","length","err","trim","splice","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.1b5a5580.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport { Button, Table, Row, Col, Empty } from 'antd';\nimport axios from 'axios';\nimport 'antd/dist/antd.css';\nimport './App.css';\n\nconst kvColumns = [\n  {\n    title: \"Key\",\n    dataIndex: \"key\",\n    key: \"key\",\n  },\n  {\n    title: \"Value\",\n    dataIndex: \"value\",\n    key: \"value\",\n  }\n]\n\nconst initKvValues = [\n  {\n    key: \"\",\n    value: \"\",\n  },\n]\n\nfunction App() {\n  const [kv, setKv] = useState(initKvValues);\n\n  return (\n    <div className=\"App\">\n      <Row>\n        <Col span={12}>\n          <Row>\n            <Table\n              columns={kvColumns}\n              dataSource={kv}\n            />\n          </Row>\n        </Col>\n        <Col span={8}>\n          <Row>\n            <Button\n              onClick={(e) => {\n                e.preventDefault();\n                var res = prompt(\"Input Key and Value Comma Separated\");\n                if (!res) {\n                  return;\n                }\n                var data = res.split(',')\n\n                // Mock data\n                axios.post('/set', {\n                  key: data[0],\n                  value: data[1]\n                })\n                .then((res) => {\n                  console.log(res.data);\n                  alert('Message: ' + res.data.message);\n\n                  let tempKv = Array.from(kv);\n                  let flag = false;\n                  for (let i = 0; i < tempKv.length; i++) {\n                    if (tempKv[i].key === res.data.key) {\n                      tempKv[i] = {key: res.data.key, value: res.data.value};\n                      console.log(tempKv);\n                      setKv(tempKv);\n                      flag = true;\n                      break;\n                    }\n                  }\n                  if(!flag) {\n                    setKv([...tempKv, {key: res.data.key, value: res.data.value}]);\n                  }\n                }, (err) => {\n                  console.log(err);\n                })\n                // setKv([...kv, {key: data[0], value:data[1]}]);\n              }}\n            >\n              Set\n            </Button>\n          </Row>\n          <Row>\n            <Button\n              onClick={(e) => {\n                e.preventDefault()\n                var res = prompt(\"Input Key\");\n                if (!res) {\n                  return;\n                }\n                var data = res.trim()\n                axios.post('/get', {\n                  key: data\n                })\n                .then((res) => {\n                  console.log(res.data);\n                  alert('Key: ' +  res.data.key + \" Value: \" + res.data.value);\n                  let tempKv = Array.from(kv);\n                  let flag = false;\n                  for (let i = 0; i < tempKv.length; i++) {\n                    if (tempKv[i].key === res.data.key) {\n                      tempKv[i] = {key: res.data.key, value: res.data.value};\n                      console.log(tempKv);\n                      setKv(tempKv);\n                      flag = true;\n                      break;\n                    }\n                  }\n                  if(!flag) {\n                    setKv([...tempKv, {key: res.data.key, value: res.data.value}]);\n                  }\n                }, (err) => {\n                  console.log(err);\n                })\n              }}\n            >\n              Get\n            </Button>\n          </Row>\n          <Row>\n            <Button\n              onClick={(e) => {\n                e.preventDefault()\n                var res = prompt(\"Input Key\");\n                if (!res) {\n                  return;\n                }\n                var data = res.trim()\n                axios.post('/delete', {\n                  key: data\n                })\n                .then((res) => {\n                  console.log(res.data);\n                  alert('Message: ' + res.data.message);\n                  let tempKv = Array.from(kv);\n                  for (let i = 0; i < tempKv.length; i++) {\n                    if (tempKv[i].key === data) {\n                      tempKv.splice(i,1);\n                      console.log(tempKv);\n                      setKv(tempKv);\n                      break;\n                    }\n                  }\n                }, (err) => {\n                  console.log(err);\n                })\n              }}\n            >\n              Delete\n            </Button>\n          </Row>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}